generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SuperAdmin
  Principal
  Operator
  Analyst
  Viewer
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  image     String?
  role      Role      @default(Viewer)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum TrsBand {
  RED
  YELLOW
  GREEN
}

enum DeliverableType {
  CLARITY_AUDIT
  GAP_MAP
  INTERVENTION_BLUEPRINT
  REVBOARD
  MONTHLY_ROI
  QUARTERLY_ROI
  CASE_STUDY_PACKET
}

enum DeliverableStatus {
  PLANNED
  IN_PROGRESS
  COMPLETE
  BLOCKED
}

enum GovernanceStatus {
  OPEN
  BLOCKED
  APPROVED
}

enum DecisionRight {
  RECOMMEND
  AUTO
}

model TrsAccount {
  id         String       @id @default(cuid())
  name       String
  slug       String       @unique
  tier       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  scores     TrsScore[]
  deliverables Deliverable[]
  governanceActions GovernanceAction[]
  modelCards ModelCard[]
  agentBindings AgentBinding[]
  contentItems ContentItem[]
  lastSyncs  LastSync[]
}

model TrsScore {
  id           String   @id @default(cuid())
  accountId    String
  account      TrsAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  cac          Float
  nrr          Float
  churn        Float
  payback      Float
  margin       Float
  forecastMape Float
  velocity     Float
  incidents    Float
  score        Float
  band         TrsBand
  drivers      Json
  computedAt   DateTime
  createdAt    DateTime  @default(now())

  @@index([accountId, computedAt], map: "idx_trs_score_account_computed")
}

model Deliverable {
  id            String            @id @default(cuid())
  accountId     String
  account       TrsAccount        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  type          DeliverableType
  title         String
  status        DeliverableStatus
  owner         String
  dueDate       DateTime?
  lastReviewAt  DateTime?
  exportLink    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  agentBindings AgentBinding[]
}

model GovernanceAction {
  id                  String           @id @default(cuid())
  accountId           String
  account             TrsAccount       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  title               String
  status              GovernanceStatus
  roiHypothesis       String?
  paybackWindowMonths Int?
  trsLever            String?
  owner               String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Agent {
  id           String          @id @default(cuid())
  slug         String          @unique
  name         String
  description  String?
  kpi          String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  modelCards   ModelCard[]
  bindings     AgentBinding[]
}

model AgentBinding {
  id            String       @id @default(cuid())
  agentId       String
  accountId     String
  deliverableId String?
  kpi           String?
  agent         Agent        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  account       TrsAccount   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  deliverable   Deliverable? @relation(fields: [deliverableId], references: [id], onDelete: SetNull)
  createdAt     DateTime     @default(now())

  @@index([accountId], map: "idx_agent_binding_account")
  @@unique([agentId, accountId, kpi], map: "uq_agent_binding_agent_account_kpi")
}

model ModelCard {
  id             String         @id @default(cuid())
  agentId        String
  accountId      String
  agent          Agent          @relation(fields: [agentId], references: [id], onDelete: Cascade)
  account        TrsAccount     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  name           String
  version        String
  f1Score        Float?
  forecastMape   Float?
  decisionRight  DecisionRight
  nextRetrainAt  DateTime?
  approver       String?
  status         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([agentId, accountId, version], map: "uq_model_card_agent_account_version")
}

model ContentItem {
  id            String      @id @default(cuid())
  accountId     String
  account       TrsAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  title         String
  source        String
  path          String
  summary       String?
  metadata      Json?
  lastIndexedAt DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([accountId, lastIndexedAt], map: "idx_content_account_last_indexed")
}

model LastSync {
  id         String      @id @default(cuid())
  accountId  String?
  account    TrsAccount? @relation(fields: [accountId], references: [id], onDelete: SetNull)
  integration String
  cursor     String?
  syncedAt   DateTime    @default(now())

  @@unique([integration], map: "uq_last_sync_integration")
}
